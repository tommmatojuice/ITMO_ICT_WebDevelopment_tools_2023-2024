{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041b\u0435\u0432\u0430\u0448\u043e\u0432\u0430 \u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u044f, \u041a33391","text":""},{"location":"laba_1/main/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":""},{"location":"laba_1/main/#_2","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435  \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445  \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a.</p>"},{"location":"laba_1/main/#_3","title":"\u0417\u0430\u0434\u0430\u0447\u0438 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u0443\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c  \u0432\u0430\u0448\u0438\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438  \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438\u043c \u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b, \u0430  \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0438  \u043a \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430\u043c, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0438  \u0430\u043d\u0430\u043b\u0438\u0437 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438.</p>"},{"location":"laba_1/page1/","title":"\u0411\u0414","text":""},{"location":"laba_1/page1/#_2","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u044b\u043d\u043d\u044b\u0445","text":"<p>\u0411\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0437 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445 \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u0445:</p> <pre><code>from sqlmodel import SQLModel, Session, create_engine\n\ndb_url = 'postgresql://postgres:12345@localhost:5433/tasks_db'\nengine = create_engine(db_url, echo=True)\n\n\ndef init_db():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre>"},{"location":"laba_1/page2/","title":"\u041c\u043e\u0434\u0435\u043b\u0438","text":"<p>\u0411\u044b\u043b\u0438 \u0440\u0435\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439:</p> <ul> <li><code>StatusEnum</code> - \u0441\u0442\u0430\u0442\u0443\u0441\u044b \u0437\u0430\u0434\u0430\u0447\u0438;</li> <li><code>PriorityEnum</code> - \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438;</li> <li><code>Label</code> - \u0442\u0435\u0433 \u0437\u0430\u0434\u0430\u0447\u0438;</li> <li><code>Category</code> - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438;</li> <li><code>User</code> - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438;</li> <li><code>TaskTime</code> - \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438;</li> <li><code>Task</code> - \u0437\u0430\u0434\u0430\u0447\u0430;</li> <li><code>Token</code> - \u0442\u043e\u043a\u0435\u043d \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438.</li> </ul> <p>\u041a\u043e\u0434 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:</p> <pre><code>from sqlmodel import SQLModel, Field, Relationship\nfrom datetime import date, datetime\nfrom typing import Optional, List\nfrom enum import Enum\nfrom passlib.context import CryptContext\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\nclass StatusEnum(Enum):\n    to_do = \"To do\"\n    in_progress = \"In progress\"\n    done = \"Done\"\n\n\nclass PriorityEnum(Enum):\n    high = \"High\"\n    medium = \"Medium\"\n    low = \"Low\"\n\n\nclass LabelTaskLink(SQLModel, table=True):\n    label_id: Optional[int] = Field(\n        default=None, foreign_key=\"label.id\", primary_key=True\n    )\n    task_id: Optional[int] = Field(\n        default=None, foreign_key=\"task.id\", primary_key=True\n    )\n    level: int | None\n\n\nclass LabelDefault(SQLModel):\n    content: Optional[str] = \"\"\n    created_at: date = Field(default_factory=date.today)\n\n\nclass Label(LabelDefault, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    tasks: Optional[List[\"Task\"]] = Relationship(back_populates=\"labels\", link_model=LabelTaskLink)\n\n\nclass CategoryDefault(SQLModel):\n    title: str\n    description: Optional[str] = \"\"\n\n\nclass Category(CategoryDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    task_cat: List[\"Task\"] = Relationship(back_populates=\"category\")\n\n\nclass UserDefault(SQLModel):\n    username: str\n    password: str\n    email: str\n    registration_date: date = Field(default_factory=date.today)\n\n\nclass User(UserDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    hashed_password: str = None\n    task_user: List[\"Task\"] = Relationship(back_populates=\"user\")\n\n    def set_password(self, password):\n        self.hashed_password = pwd_context.hash(password)\n\n\nclass TaskTime(SQLModel, table=True):\n    id: int = Field(default=None, primary_key=True)\n    start_time: Optional[datetime] = None\n    end_time: Optional[datetime] = None\n    task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\")\n    task: Optional[\"Task\"] = Relationship(back_populates=\"task_time\")\n\n\nclass TaskDefault(SQLModel):\n    title: str\n    description: str\n    deadline: date\n    created_date: date = Field(default_factory=date.today)\n    priority: PriorityEnum\n    status: StatusEnum\n    category_id: Optional[int] = Field(default=None, foreign_key=\"category.id\")\n    user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\")\n\n\nclass Task(TaskDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    category: Optional[Category] = Relationship(back_populates=\"task_cat\")\n    user: Optional[User] = Relationship(back_populates=\"task_user\")\n    labels: Optional[List[Label]] = Relationship(back_populates=\"tasks\", link_model=LabelTaskLink)\n    task_time: Optional[\"TaskTime\"] = Relationship(\n        back_populates=\"task\"\n    )\n\n\nclass TasksDetails(TaskDefault):\n    user: Optional[User] = None\n    category: Optional[Category] = None\n    task_time: Optional[TaskTime] = None\n    labels: Optional[List[Label]] = None\n\n\nclass Token(SQLModel):\n    access_token: str\n    token_type: str\n</code></pre>"},{"location":"laba_1/page3/","title":"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438","text":""},{"location":"laba_1/page3/#_2","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439","text":"<p>\u0411\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: * \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439; * \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043f\u043e id; * \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438; * \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438; * \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438.</p> <p>\u041a\u043e\u0434 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:</p> <pre><code>from typing import List\nfrom fastapi import HTTPException, Depends, APIRouter\nfrom sqlmodel import select\nfrom typing_extensions import TypedDict\nfrom models import Category, CategoryDefault\nfrom connection import get_session\n\n\nrouter = APIRouter()\n\n\n@router.get(\"/\")\ndef categories_list(session=Depends(get_session)) -&gt; List[Category]:\n    return session.exec(select(Category)).all()\n\n\n@router.get(\"/{category_id}\")\ndef get_category(category_id: int, session=Depends(get_session)) -&gt; Category:\n    return session.get(Category, category_id)\n\n\n@router.post(\"/\")\ndef category_create(cat: CategoryDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int,\n                                                                                                  \"data\": Category}):\n    cat = Category.model_validate(cat)\n    session.add(cat)\n    session.commit()\n    session.refresh(cat)\n    return {\"status\": 200, \"data\": cat}\n\n\n@router.delete(\"/{category_id}\")\ndef delete_category(category_id: int, session=Depends(get_session)) -&gt; TypedDict('Response', {\"is_deleted\": bool}):\n    category = session.get(Category, category_id)\n    if not category:\n        raise HTTPException(status_code=404, detail=\"Category not found\")\n    session.delete(category)\n    session.commit()\n    return {\"is_deleted\": True}\n\n\n@router.patch(\"/{category_id}\")\ndef update_task(category_id: int, category: CategoryDefault, session=Depends(get_session)) -&gt; CategoryDefault:\n    db_categories = session.get(Category, category_id)\n    if not db_categories:\n        raise HTTPException(status_code=404, detail=\"Category not found\")\n    categories_data = category.model_dump(exclude_unset=True)\n    for key, value in categories_data.items():\n        setattr(db_categories, key, value)\n    session.add(db_categories)\n    session.commit()\n    session.refresh(db_categories)\n    return db_categories\n</code></pre>"},{"location":"laba_1/page4/","title":"\u0422\u0435\u0433\u0438","text":""},{"location":"laba_1/page4/#_2","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0442\u0435\u0433\u043e\u0432","text":"<p>\u0411\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:</p> <ul> <li>\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0442\u0435\u0433\u043e\u0432;</li> <li>\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u0433\u0430 \u043f\u043e id;</li> <li>\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u0433\u0430;</li> <li>\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0442\u0435\u0433\u0430.</li> </ul> <p>\u041a\u043e\u0434 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:</p> <pre><code>from typing import List\nfrom fastapi import HTTPException, Depends, APIRouter\nfrom sqlmodel import select\nfrom typing_extensions import TypedDict\nfrom models import Label, LabelDefault\nfrom connection import get_session\n\n\nrouter = APIRouter()\n\n\n@router.get(\"/\")\ndef labels_list(session=Depends(get_session)) -&gt; List[Label]:\n    return session.exec(select(Label)).all()\n\n\n@router.get(\"/{label_id}\")\ndef get_label(label_id: int, session=Depends(get_session)) -&gt; Label:\n    return session.get(Label, label_id)\n\n\n@router.post(\"/\")\ndef label_create(lab: LabelDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int,\n                                                                                            \"data\": Label}):\n    lab = Label.model_validate(lab)\n    session.add(lab)\n    session.commit()\n    session.refresh(lab)\n    return {\"status\": 200, \"data\": lab}\n\n\n@router.delete(\"/{label_id}\")\ndef delete_label(label_id: int, session=Depends(get_session)) -&gt; TypedDict('Response', {\"is_deleted\": bool}):\n    label = session.get(Label, label_id)\n    if not label:\n        raise HTTPException(status_code=404, detail=\"Label not found\")\n    session.delete(label)\n    session.commit()\n    return {\"is_deleted\": True}\n\n\n@router.patch(\"/{label_id}\")\ndef update_label(label_id: int, label: LabelDefault, session=Depends(get_session)) -&gt; LabelDefault:\n    db_labels = session.get(Label, label_id)\n    if not db_labels:\n        raise HTTPException(status_code=404, detail=\"Label not found\")\n    categories_data = label.model_dump(exclude_unset=True)\n    for key, value in categories_data.items():\n        setattr(db_labels, key, value)\n    session.add(db_labels)\n    session.commit()\n    session.refresh(db_labels)\n    return db_labels\n</code></pre>"},{"location":"laba_1/page5/","title":"\u041f\u043e\u043b\u0442\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438","text":""},{"location":"laba_1/page5/#_2","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439","text":"<p>\u0411\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:</p> <ul> <li>\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439;</li> <li>\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e id;</li> <li>\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f;</li> <li>\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f;</li> <li>\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f;</li> <li>\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f;</li> </ul> <p>\u041a\u043e\u0434 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:</p> <pre><code>from typing import List\nfrom fastapi import HTTPException, Depends, APIRouter\nfrom sqlmodel import select\nfrom typing_extensions import TypedDict\nfrom models import User, UserDefault, Task, TasksDetails\nfrom connection import get_session\nfrom api.auth import get_current_user\n\n\nrouter = APIRouter()\n\n\n@router.get(\"/\")\ndef users_list(session=Depends(get_session)) -&gt; List[User]:\n    return session.exec(select(User)).all()\n\n\n@router.get(\"/{user_id}\")\ndef get_label(user_id: int, session=Depends(get_session)) -&gt; User:\n    return session.get(User, user_id)\n\n\n@router.post(\"/\")\ndef user_create(user: UserDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int,\n                                                                                            \"data\": User}):\n    user = User.model_validate(user)\n    user.set_password(user.password)\n    session.add(user)\n    session.commit()\n    session.refresh(user)\n    return {\"status\": 200, \"data\": user}\n\n\n@router.delete(\"/{user_id}\")\ndef delete_user(user_id: int, session=Depends(get_session)) -&gt; TypedDict('Response', {\"is_deleted\": bool}):\n    user = session.get(User, user_id)\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    session.delete(user)\n    session.commit()\n    return {\"is_deleted\": True}\n\n\n@router.patch(\"/{user_id}\")\ndef update_user(user_id: int, user: UserDefault, session=Depends(get_session)) -&gt; UserDefault:\n    db_users = session.get(User, user_id)\n    if not db_users:\n        raise HTTPException(status_code=404, detail=\"Label not found\")\n    categories_data = user.model_dump(exclude_unset=True)\n    for key, value in categories_data.items():\n        setattr(db_users, key, value)\n    session.add(db_users)\n    session.commit()\n    session.refresh(db_users)\n    return db_users\n</code></pre>"},{"location":"laba_1/page6/","title":"\u0417\u0430\u0434\u0430\u0447\u0438","text":""},{"location":"laba_1/page6/#_2","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447","text":"<p>\u0411\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:</p> <ul> <li>\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u0434\u0430\u0447;</li> <li>\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e id;</li> <li>\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438;</li> <li>\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438;</li> <li>\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438;</li> <li>\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u0433\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438;</li> <li>\u043d\u0430\u0447\u0430\u043b\u043e \u0437\u0430\u0434\u0430\u0447\u0438;</li> <li>\u0437\u0430\u0432\u0435\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438;</li> <li>\u043f\u0430\u0443\u0437\u0430 \u0437\u0430\u0434\u0430\u0447\u0438;</li> <li>\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</li> </ul> <p>\u041a\u043e\u0434 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:</p> <pre><code>from datetime import datetime, date\nfrom typing import List, Optional\nfrom fastapi import HTTPException, Depends, APIRouter\nfrom sqlmodel import select, Session\nfrom typing_extensions import TypedDict\nfrom models import TasksDetails, Task, LabelDefault, Label, TaskDefault, StatusEnum, PriorityEnum\nfrom connection import get_session\n\n\nrouter = APIRouter()\n\n\n@router.get(\"\", response_model=List[TasksDetails])\ndef tasks_list(session=Depends(get_session)) -&gt; List[Task]:\n    return session.exec(select(Task)).all()\n\n\n@router.get(\"/{task_id}\", response_model=TasksDetails)\ndef get_task(task_id: int, session=Depends(get_session)) -&gt; Task:\n    task = session.get(Task, task_id)\n    return task\n\n\n@router.post(\"/\")\ndef create_task(task_data: TaskDefault, label_data: List[LabelDefault] = None,\n                session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": Task,\n                                                                        \"label_data\": List}):\n    if label_data is None:\n        label_data = []\n\n    task = Task(**task_data.dict())\n    session.add(task)\n    session.flush()\n\n    for label_info in label_data:\n        if label_info.content:\n            existing_label = session.exec(select(Label).where(Label.content == label_info.content)).first()\n            if existing_label:\n                task.labels.append(existing_label)\n            else:\n                label = Label(**label_info.dict())\n                session.add(label)\n                session.flush()\n                task.labels.append(label)\n\n    session.commit()\n    session.refresh(task)\n    return {\"status\": 200, \"data\": task, \"label_data\": [label_info.dict() for label_info in label_data]}\n\n\n@router.patch(\"/{task_id}/add_labels\")\ndef add_labels_to_task(task_id: int, label_data: List[LabelDefault], session=Depends(get_session)) \\\n        -&gt; TypedDict('Response', {\"message\": str}):\n    task = session.get(Task, task_id)\n\n    if not task:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n\n    for label_info in label_data:\n        if label_info.content:\n            label = Label(**label_info.dict())\n            session.add(label)\n            session.flush()\n            task.labels.append(label)\n        else:\n            raise HTTPException(status_code=500, detail=\"Empty content\")\n\n    session.commit()\n\n    return {\"message\": \"Labels added to task successfully\"}\n\n\n@router.patch(\"/{task_id}/start_task\")\ndef start_task(task_id: int, session=Depends(get_session)) -&gt; TypedDict('Response', {\"message\": str}):\n    task = session.get(Task, task_id)\n\n    if not task:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n\n    task.task_time.start_time = datetime.now()\n    task.status = StatusEnum.in_progress\n    session.commit()\n\n    return {\"message\": \"Task start time and status updated successfully\"}\n\n\n@router.patch(\"/{task_id}/finish_task\")\ndef finish_task(task_id: int, session=Depends(get_session)) -&gt; TypedDict('Response', {\"message\": str}):\n    task = session.get(Task, task_id)\n\n    if not task:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n\n    task.task_time.end_time = datetime.now()\n    task.status = StatusEnum.done\n    session.commit()\n\n    return {\"message\": \"Task finished successfully\"}\n\n\n@router.patch(\"/{task_id}/stop_task\")\ndef stop_task(task_id: int, session=Depends(get_session)) -&gt; TypedDict('Response', {\"message\": str}):\n    task = session.get(Task, task_id)\n\n    if not task:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n\n    task.task_time.start_time = datetime.now()\n    task.status = StatusEnum.to_do\n    session.commit()\n\n    return {\"message\": \"Task stopped successfully\"}\n\n\n@router.patch(\"/{task_id}/time_spent\")\ndef get_task_time(task_id: int, session=Depends(get_session))\\\n        -&gt; TypedDict('Response', {\"task_id\": int, \"total_time_spent\": float}):\n    task = session.get(Task, task_id)\n    if not task:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    total_time_spent = task.task_time.end_time - task.task_time.start_time\n    return {\"task_id\": task_id, \"total_time_spent\": total_time_spent}\n\n\n@router.delete(\"/{task_id}\")\ndef delete_task(task_id: int, session=Depends(get_session)) -&gt; TypedDict('Response', {\"is_deleted\": bool}):\n    task = session.get(Task, task_id)\n    if not task:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    session.delete(task)\n    session.commit()\n    return {\"is_deleted\": True}\n\n\n@router.patch(\"/{task_id}\")\ndef update_task(\n        task_id: int,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        deadline: Optional[date] = None,\n        priority: Optional[PriorityEnum] = None,\n        category_id: Optional[int] = None,\n        session: Session = Depends(get_session)\n) -&gt; TypedDict('Response', {\"title\": str, \"description\": str, \"deadline\": date, \"priority\": PriorityEnum,\n                            \"category_id\": int | None}):\n    task = session.get(Task, task_id)\n\n    if not task:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n\n    update_data = {\n        \"title\": title,\n        \"description\": description,\n        \"deadline\": deadline,\n        \"priority\": priority,\n        \"category_id\": category_id\n    }\n\n    for field, value in update_data.items():\n        if value is not None:\n            setattr(task, field, value)\n\n    session.commit()\n\n    return {\n        \"title\": task.title,\n        \"description\": task.description,\n        \"deadline\": task.deadline,\n        \"priority\": task.priority,\n        \"category_id\": task.category_id\n    }\n</code></pre>"},{"location":"laba_1/page7/","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u0414\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430  \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c. \u0414\u0430\u043b\u0435\u0435 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u0442\u043e\u043a\u0435\u043d\u0443 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432  \u0441 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438.</p> <p>\u041a\u043e\u0434 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:</p> <pre><code>from datetime import timedelta\n\nfrom connection import get_session\nfrom fastapi import APIRouter, status\nfrom typing import Annotated, List\nfrom fastapi import Depends, HTTPException\nfrom models import User, Token, Task\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom sqlmodel import Session\nfrom services.auth import authenticate, create_access_token, get_current_user\nfrom sqlmodel import select\n\n\nrouter = APIRouter()\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\n@router.post(\"/login\", status_code=status.HTTP_202_ACCEPTED)\ndef login_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n    session: Session = Depends(get_session),\n) -&gt; Token:\n    user = authenticate(\n        username=form_data.username, password=form_data.password, session=session\n    )\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires)\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n\n@router.get(\"/getCurrentUser\", response_model=User)\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n\n\n@router.get(\"/getCurrentUserTasks\", response_model=List[Task])\nasync def get_user_tasks(\n        current_user: Annotated[User, Depends(get_current_user)],\n        session=Depends(get_session)\n) -&gt; List[Task]:\n    if not current_user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    print(f'get_user_tasks = {current_user}')\n    tasks_query = select(Task).where(Task.user_id == current_user.id)\n    tasks = session.exec(tasks_query).all()\n    return tasks\n</code></pre> <p>\u0411\u044b\u043b\u0438 \u0442\u0430\u043a \u0436\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</p> <p>\u041a\u043e\u0434 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:</p> <pre><code>from datetime import timedelta\n\nfrom connection import get_session\nfrom fastapi import APIRouter, status\nfrom typing import Annotated, List\nfrom fastapi import Depends, HTTPException\nfrom models import User, Token, Task\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom sqlmodel import Session\nfrom services.auth import authenticate, create_access_token, get_current_user\nfrom sqlmodel import select\n\n\nrouter = APIRouter()\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\n@router.post(\"/login\", status_code=status.HTTP_202_ACCEPTED)\ndef login_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n    session: Session = Depends(get_session),\n) -&gt; Token:\n    user = authenticate(\n        username=form_data.username, password=form_data.password, session=session\n    )\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires)\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n\n@router.get(\"/getCurrentUser\", response_model=User)\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n\n\n@router.get(\"/getCurrentUserTasks\", response_model=List[Task])\nasync def get_user_tasks(\n        current_user: Annotated[User, Depends(get_current_user)],\n        session=Depends(get_session)\n) -&gt; List[Task]:\n    if not current_user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    print(f'get_user_tasks = {current_user}')\n    tasks_query = select(Task).where(Task.user_id == current_user.id)\n    tasks = session.exec(tasks_query).all()\n    return tasks\n</code></pre>"},{"location":"laba_2/main/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":""},{"location":"laba_2/main/#_2","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u041f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c,  \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python.</p>"},{"location":"laba_2/main/#_3","title":"\u0417\u0430\u0434\u0430\u0447\u0438 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<ol> <li>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python,  \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async.  \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000.  \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</li> <li>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445  \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432  threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c  \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</li> </ol> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438.</p>"},{"location":"laba_2/page1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1. Async","text":""},{"location":"laba_2/page1/#_1","title":"\u041a\u043e\u0434","text":"<pre><code>import asyncio\nimport time\n\n\nasync def calculate_sum(start, end):\n    total = sum(range(start, end + 1))\n    return total\n\n\nasync def main():\n    n_tasks = 4\n    tasks = []\n    chunk_size = 1000000 // n_tasks\n\n    for i in range(n_tasks):\n        start = i * chunk_size + 1\n        end = (i + 1) * chunk_size if i != n_tasks - 1 else 1000000\n        tasks.append(calculate_sum(start, end))\n\n    results = await asyncio.gather(*tasks)\n    total_sum = sum(results)\n    print(f\"Total sum: {total_sum}\")\n\nif __name__ == '__main__':\n    start_time = time.time()\n    asyncio.run(main())\n    end_time = time.time()\n    print(f\"Execution time: {end_time - start_time:.2f} seconds\")\n</code></pre>"},{"location":"laba_2/page1/#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<p>\u0412 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u043e\u0434\u0443\u043b\u044c asyncio \u0434\u043b\u044f \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438  \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0438 time \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f calculate_sum \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439, \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e async \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442,  \u0447\u0442\u043e \u0435\u0451 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0438 \u0432\u043e\u0437\u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043e. \u0424\u0443\u043d\u043a\u0446\u0438\u044f  \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f start  \u0434\u043e \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f end.</p> <p>\u0412 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 main \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435:</p> <ul> <li> <p>n_tasks \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447;</p> </li> <li> <p>tasks \u2014 \u0441\u043f\u0438\u0441\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0437\u0430\u0434\u0430\u0447;</p> </li> <li> <p>chunk_size \u2014 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0447\u0438\u0441\u0435\u043b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438, \u0442.\u0435. \u043e\u0431\u0449\u0438\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0447\u0438\u0441\u0435\u043b \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u044d\u0442\u0443 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e.  </p> </li> </ul> <p>\u0414\u0430\u043b\u0435\u0435 \u0432 \u0446\u0438\u043a\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u0436\u0434\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u0437\u043e\u0432\u043e\u043c calculate_sum \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043a\u043e\u043d\u0446\u0430. \u042d\u0442\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a tasks. asyncio.gather \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447 \u0438 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0438\u0445 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f. \u041e\u043d \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0438\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 results. \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0438\u0437 \u0437\u0430\u0434\u0430\u0447.</p> <p>\u0421\u043a\u0440\u0438\u043f\u0442 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0440\u0443\u0442\u0438\u043d\u0443 main \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e asyncio.run() \u0438 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p>"},{"location":"laba_2/page1/#async","title":"Async","text":"<p>Async \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043e\u0434\u0438\u043d \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447,  \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u044f\u0441\u044c \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u0432 \u0442\u043e\u0447\u043a\u0430\u0445, \u0433\u0434\u0435 \u043e\u0434\u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430  \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044f. \u042d\u0442\u043e\u0442 \u043f\u043e\u0434\u0445\u043e\u0434 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441  \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0442\u044b\u0441\u044f\u0447\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e.</p> <p>\u041a\u043b\u044e\u0447\u0435\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e async \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c\u0441\u044f  (\u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c await \u0432 \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445),  \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u044f \u0446\u0438\u043a\u043b \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0437\u0430\u0434\u0430\u0447.  \u0417\u0434\u0435\u0441\u044c await \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441 asyncio.gather \u0434\u043b\u044f \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438  main \u0434\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447.</p>"},{"location":"laba_2/page2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1. Multiprocessing","text":""},{"location":"laba_2/page2/#_1","title":"\u041a\u043e\u0434","text":"<pre><code>import multiprocessing\nimport time\n\n\ndef calculate_sum(start, end, result_queue):\n    total = sum(range(start, end + 1))\n    result_queue.put(total)\n\n\ndef main():\n    n_processes = 4\n    result_queue = multiprocessing.Queue()\n    processes = []\n    chunk_size = 1000000 // n_processes\n\n    for i in range(n_processes):\n        start = i * chunk_size + 1\n        end = (i + 1) * chunk_size if i != n_processes - 1 else 1000000\n        process = multiprocessing.Process(target=calculate_sum, args=(start, end, result_queue))\n        processes.append(process)\n        process.start()\n\n    for process in processes:\n        process.join()\n\n    total_sum = 0\n    while not result_queue.empty():\n        total_sum += result_queue.get()\n\n    print(f\"Total sum: {total_sum}\")\n\n\nif __name__ == '__main__':\n    start_time = time.time()\n    main()\n    end_time = time.time()\n    print(f\"Execution time: {end_time - start_time:.2f} seconds\")\n</code></pre>"},{"location":"laba_2/page2/#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<p>\u0412 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445  \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442  \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1 000 000, \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044f \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u0447\u0435\u0442\u044b\u0440\u0435 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445  \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430.</p> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 calculate_sum \u0430\u043d\u0430\u043b\u043e\u0433\u0447\u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435, \u043a\u0440\u043e\u043c\u0435  \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u043e\u0447\u0435\u0440\u0435\u0434\u044c result_queue \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432.</p> <p>\u0417\u0434\u0435\u0441\u044c:</p> <ul> <li> <p>n_processes \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.</p> </li> <li> <p>result_queue \u2014 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.</p> </li> <li> <p>processes \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.</p> </li> </ul> <p>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442 multiprocessing.Process, \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f calculate_sum, \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432. \u0417\u0430\u0442\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f. \u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043e\u043d\u0438 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 join(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442, \u0447\u0442\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 main \u0431\u0443\u0434\u0435\u0442 \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0437 result_queue.</p>"},{"location":"laba_2/page2/#multiprocessing","title":"Multiprocessing","text":"<p>\u0412 multiprocessing \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u0430\u0434\u0440\u0435\u0441\u043d\u043e\u043c  \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435 \u043f\u0430\u043c\u044f\u0442\u0438. \u0422\u0430\u043a\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043e\u0432 \u0438\u043b\u0438  \u044f\u0434\u0435\u0440 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440  \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430 Python. \u0414\u043b\u044f \u043e\u0431\u043c\u0435\u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f  \u043c\u0435\u0436\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0447\u0435\u0440\u0435\u0434\u0438), \u0447\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0437\u0430\u0442\u0440\u0430\u0442\u043d\u044b\u043c \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441  \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438\u0437-\u0437\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"laba_2/page3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1. Threading","text":""},{"location":"laba_2/page3/#_1","title":"\u041a\u043e\u0434","text":"<pre><code>import threading\nimport time\n\n\ndef calculate_sum(start, end, result, index):\n    total = sum(range(start, end + 1))\n    result[index] = total\n\n\ndef main():\n    n_threads = 4\n    results = [0] * n_threads\n    threads = []\n    chunk_size = 1000000 // n_threads\n\n    for i in range(n_threads):\n        start = i * chunk_size + 1\n        end = (i + 1) * chunk_size if i != n_threads - 1 else 1000000\n        thread = threading.Thread(target=calculate_sum, args=(start, end, results, i))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    total_sum = sum(results)\n    print(f\"Total sum: {total_sum}\")\n\n\nif __name__ == '__main__':\n    start_time = time.time()\n    main()\n    end_time = time.time()\n    print(f\"Execution time: {end_time - start_time:.2f} seconds\")\n</code></pre>"},{"location":"laba_2/page3/#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<p>\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u043e\u0434\u0443\u043b\u044c threading \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0439  \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441 \u0446\u0435\u043b\u044c\u044e \u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0432\u0430\u043d\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e  1 000 000.</p> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 calculate_sum \u0430\u043d\u0430\u043b\u043e\u0433\u0447\u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435, \u043a\u0440\u043e\u043c\u0435  \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432 result.</p> <p>\u0417\u0434\u0435\u0441\u044c:</p> <ul> <li> <p>n_threads \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432. </p> </li> <li> <p>results \u2014 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430. </p> </li> <li> <p>threads \u2014 \u0441\u043f\u0438\u0441\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u043e\u0442\u043e\u043a\u043e\u0432. </p> </li> </ul> <p>\u0412 \u0446\u0438\u043a\u043b\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442 threading.Thread,  \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f calculate_sum \u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b. \u041c\u0435\u0442\u043e\u0434 join() \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u0447\u0442\u043e \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442,  \u0447\u0442\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u0431\u0443\u0434\u0435\u0442 \u0436\u0434\u0430\u0442\u044c \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u0441\u0435\u0445 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432. \u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b, \u0445\u0440\u0430\u043d\u044f\u0449\u0438\u0435\u0441\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 results.</p>"},{"location":"laba_2/page3/#threading","title":"Threading","text":"<p>\u0412 threading \u043f\u043e\u0442\u043e\u043a\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0442 \u043e\u0434\u043d\u043e \u0438 \u0442\u043e \u0436\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430,  \u0447\u0442\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438. \u0422\u0430\u043a\u043e\u0439 \u0436\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u0435\u0441\u0442\u044c \u0443 multiprocessing. \u042d\u0442\u043e\u0442 \u043f\u043e\u0434\u0445\u043e\u0434 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0434\u043b\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0432\u043e\u0434\u0430/\u0432\u044b\u0432\u043e\u0434\u0430,  \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0438\u0437-\u0437\u0430 GIL \u043c\u043e\u0436\u0435\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u043f\u043e\u0442\u043e\u043a, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432 \u0442\u0430\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u044d\u0442\u043e \u043d\u0435 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.</p>"},{"location":"laba_2/page4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. Config","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0441 \u0447\u0438\u0441\u043b\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u043a\u043b\u0430\u0441\u0441\u044b \u0438 \u0442\u0435\u0433\u0438 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0438 URL-\u0430\u0434\u0440\u0435\u0441\u0430 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. </p>"},{"location":"laba_2/page4/#_1","title":"\u041a\u043e\u0434","text":"<pre><code>URLS = [\n    'https://skillbox.ru/media/code/kak-stat-tsennym-kadrom-6-sovetov-dlya-karernogo-rosta-razrabotchika/',\n    'https://skillbox.ru/media/design/kak-stat-dizaynerom-luchshie-professionalnye-kursy-graficheskogo-dizayna/',\n    'https://skillbox.ru/media/management/kak-stat-prodaktmenedzherom-i-nuzhno-li-dlya-etogo-obrazovanie/',\n    'https://skillbox.ru/media/management/produktovyy-analitik-chem-on-zanimaetsya-skolko-zarabatyvaet-i-kak-im-stat/',\n    'https://skillbox.ru/media/code/qainzhener-kto-eto-chem-on-zanimaetsya-i-kak-im-stat/',\n    'https://skillbox.ru/media/management/kto-takoy-restorator-skolko-on-zarabatyvaet-i-kak-im-stat/',\n    'https://skillbox.ru/media/marketing/kak-stat-eventmenedzherom-gde-uchitsya-i-poluchat-prakticheskie-navyki/',\n    'https://skillbox.ru/media/marketing/kak-stat-seospetsialistom-i-chto-osvoit-chtoby-zarabatyvat-bolshe-80-tysyach-rubley/'\n    ]\n\nNUM_THREADS = 4\nHTML_CLASS = 'stk-reset stk-theme_26309__style_large_header'\nHTML_TAG = 'h2'\n</code></pre>"},{"location":"laba_2/page5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. DataBaseConnection","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"laba_2/page5/#_1","title":"\u041a\u043e\u0434","text":"<pre><code>import psycopg2\n\n\nclass DataBaseConnection:\n    INSERT_SQL = \"\"\"INSERT INTO public.task(title, description, deadline, \n                                            created_date, priority, status, \n                                            category_id, user_id)\n                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)\"\"\"\n\n    @staticmethod\n    def connect_to_database():\n        conn = psycopg2.connect(\n            dbname=\"tasks_db\",\n            user=\"postgres\",\n            password=\"12345\",\n            host=\"localhost\",\n            port=\"5433\"\n        )\n        return conn\n</code></pre>"},{"location":"laba_2/page6/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. Async","text":""},{"location":"laba_2/page6/#_1","title":"\u041a\u043e\u0434","text":"<pre><code>import asyncio\nimport aiohttp\nimport time\nimport config\n\nfrom connection import DataBaseConnection\nfrom bs4 import BeautifulSoup\nfrom datetime import date, timedelta\n\n\nasync def parse_and_save(url, db_conn):\n    try:\n        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session:\n            async with session.get(url) as response:\n                html = await response.text()\n                soup = BeautifulSoup(html, 'html.parser')\n                tasks = soup.find_all(config.HTML_TAG, class_=config.HTML_CLASS)\n                tasks = [task.text.strip().replace('\\xa0', ' ') for task in tasks]\n\n                with db_conn.cursor() as cursor:\n                    for task in tasks:\n                        cursor.execute(DataBaseConnection.INSERT_SQL,\n                                       (task, '', str(date.today()), str(date.today() + timedelta(7)),\n                                        'high', 'to_do', 2, 3))\n\n                db_conn.commit()\n    except Exception as e:\n        print(\"Error:\", e)\n\n\nasync def process_url_list(url_list, conn):\n    tasks = []\n    for url in url_list:\n        task = asyncio.create_task(parse_and_save(url, conn))\n        tasks.append(task)\n    await asyncio.gather(*tasks)\n\n\nasync def main():\n    urls = config.URLS\n    num_threads = config.NUM_THREADS\n    chunk_size = len(urls) // num_threads\n    url_chunks = [urls[i:i + chunk_size] for i in range(0, len(urls), chunk_size)]\n\n    db_conn = DataBaseConnection.connect_to_database()\n    start_time = time.time()\n\n    await asyncio.gather(*(process_url_list(chunk, db_conn) for chunk in url_chunks))\n\n    db_conn.close()\n    end_time = time.time()\n\n    print(f\"Execution time: {end_time - start_time:.2f} seconds\")\n\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"laba_2/page6/#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u0412 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 asyncio \u0438 aiohttp. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430  \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u043f\u0430\u0440\u0441\u0438\u0442 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. </p> <p>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f parse_and_save \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 URL-\u0430\u0434\u0440\u0435\u0441 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445.  \u041e\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL. \u0414\u0430\u043b\u0435\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 BeautifulSoup \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445.  \u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0437\u0430\u043f\u0440\u043e\u0441\u0430.</p> <p>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f process_url_list \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e URL \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 parse_and_save. asyncio.gather \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447.</p> <p>\u0412 main \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0438\u0437 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430.  \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438, \u0434\u0430\u043b\u0435\u0435 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 DataBaseConnection. \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0430\u043d\u043a\u0430 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f asyncio.gather.  \u0422\u0430\u043a\u0436\u0435 \u0418\u0437\u043c\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439.</p> <p>\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.  \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 aiohttp \u0434\u043b\u044f \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 asyncio \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0438 \u0438 \u043f\u043e\u0432\u044b\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0437\u0430 \u0441\u0447\u0451\u0442 \u043d\u0435\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0435\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u0430. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u043e\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0431\u0435\u0437 \u0437\u0430\u043c\u0435\u0434\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p>"},{"location":"laba_2/page7/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. Multiprocessing","text":""},{"location":"laba_2/page7/#_1","title":"\u041a\u043e\u0434","text":"<pre><code>import multiprocessing\nimport time\nimport config\nimport requests\n\nfrom bs4 import BeautifulSoup\nfrom datetime import date, timedelta\nfrom connection import DataBaseConnection\n\n\ndef parse_and_save(url):\n    try:\n        response = requests.get(url)\n\n        if response.status_code == 200:\n            html = response.text\n            soup = BeautifulSoup(html, 'html.parser')\n            tasks = soup.find_all(config.HTML_TAG, class_=config.HTML_CLASS)\n            tasks = [task.text.strip().replace('\\xa0', ' ') for task in tasks]\n        else:\n            tasks = []\n\n        with DataBaseConnection.connect_to_database() as db_conn:\n            with db_conn.cursor() as cursor:\n                for task in tasks:\n                    cursor.execute(DataBaseConnection.INSERT_SQL,\n                                   (task, '', str(date.today()), str(date.today() + timedelta(7)),\n                                    'high', 'to_do', 2, 3))\n\n        db_conn.commit()\n    except Exception as e:\n        print(\"Error:\", e)\n\n\ndef process_url_list(url_queue):\n    for url in url_queue:\n        parse_and_save(url)\n\n\ndef main():\n    urls = config.URLS\n    num_threads = config.NUM_THREADS\n    chunk_size = len(urls) // num_threads\n    url_chunks = [urls[i:i + chunk_size] for i in range(0, len(urls), chunk_size)]\n\n    start_time = time.time()\n    processes = []\n\n    for chunk in url_chunks:\n        process = multiprocessing.Process(target=process_url_list, args=(chunk,))\n        process.start()\n        processes.append(process)\n\n    for process in processes:\n        process.join()\n\n    end_time = time.time()\n\n    print(f\"Execution time: {end_time - start_time:.2f} seconds\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"laba_2/page7/#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446  \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0451\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. </p> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f parse_and_save \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 requests \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f HTML-\u043a\u043e\u0434\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0415\u0441\u043b\u0438 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u0443\u0441\u043f\u0435\u0448\u0435\u043d, \u043e\u0442\u0432\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 BeautifulSoup. \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f process_url_list \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 URL \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 parse_and_save.</p> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f main \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0438\u0437 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.  \u0414\u0430\u043b\u0435\u0435 \u0434\u0435\u043b\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438, \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0432\u043e\u044e \u0447\u0430\u0441\u0442\u044c URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0432\u0441\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0438\u0445 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f. \u0410 \u0442\u0430\u043a\u0436\u0435 \u0438\u0437\u043c\u0435\u0440\u044f\u0435\u0442 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439.</p> <p>\u0412 \u0446\u0435\u043b\u043e\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e multiprocessing \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432\u044b\u043f\u043e\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e, \u0447\u0442\u043e \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. </p>"},{"location":"laba_2/page8/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. Threading","text":""},{"location":"laba_2/page8/#_1","title":"\u041a\u043e\u0434","text":"<pre><code>import threading\nimport time\nimport config\nimport requests\n\nfrom connection import DataBaseConnection\nfrom bs4 import BeautifulSoup\nfrom datetime import date, timedelta\n\n\ndef parse_and_save(url, db_conn):\n    try:\n        response = requests.get(url)\n\n        if response.status_code == 200:\n            html = response.text\n            soup = BeautifulSoup(html, 'html.parser')\n            tasks = soup.find_all(config.HTML_TAG, class_=config.HTML_CLASS)\n            tasks = [task.text.strip().replace('\\xa0', ' ') for task in tasks]\n        else:\n            tasks = []\n\n        with db_conn.cursor() as cursor:\n            for task in tasks:\n                cursor.execute(DataBaseConnection.INSERT_SQL,\n                               (task, '', str(date.today()), str(date.today() + timedelta(7)),\n                                'high', 'to_do', 2, 3))\n        db_conn.commit()\n    except Exception as e:\n        print(\"Error:\", e)\n\n\ndef process_url_list(url_queue, db_conn):\n    for url in url_queue:\n        parse_and_save(url, db_conn)\n\n\ndef main():\n    urls = config.URLS\n    num_threads = config.NUM_THREADS\n    chunk_size = len(urls) // num_threads\n    url_chunks = [urls[i:i + chunk_size] for i in range(0, len(urls), chunk_size)]\n\n    db_conn = DataBaseConnection.connect_to_database()\n    start_time = time.time()\n    threads = []\n\n    for chunk in url_chunks:\n        thread = threading.Thread(target=process_url_list, args=(chunk, db_conn))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    end_time = time.time()\n    db_conn.close()\n\n    print(f\"Execution time: {end_time - start_time:.2f} seconds\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"laba_2/page8/#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043d\u0430 Python \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043c\u043e\u0434\u0443\u043b\u044c threading \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430  \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c multiprocessing, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0430\u043d\u043a\u0430 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u0442\u043e\u043a, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f threading.Thread, \u0441 \u0446\u0435\u043b\u044c\u044e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</p>"},{"location":"laba_2/page9/","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b","text":"Threading Multiprocessing Asyncio Task 1 0.01 sec 0.08 sec 0.01 sec Task 2 1.05 sec 1.00 sec 0.54 sec"},{"location":"laba_2/page9/#no-1","title":"\u0412\u044b\u0432\u043e\u0434 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044e \u2116 1","text":"<p>\u0412 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 threading \u043f\u043e\u0442\u043e\u043a\u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0442\u0441\u044f GIL. \u041d\u043e \u0442\u0443\u0442, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0437\u0430 \u0441\u0447\u0435\u0442 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0435 GIL \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u043b\u0438\u044f\u043d\u0438\u044f, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0431\u044b\u0441\u0442\u0440\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u0422\u0443\u0442 \u043f\u043e\u0434\u0445\u043e\u0434 \u0441 Multiprocessing \u0434\u043e\u043b\u0436\u0435\u043d \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043b\u0443\u0447\u0448\u0435, \u043d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u0438\u0445 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u0437\u0430\u0442\u0440\u0430\u0442\u044b \u043d\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u043a \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u043c \u0440\u0430\u0441\u0445\u043e\u0434\u0430\u043c, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0438\u0437-\u0437\u0430 \u044d\u0442\u043e \u0432\u0440\u0435\u043c\u044f \u0442\u0430\u043a \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u043b\u043e\u0441\u044c. \u041f\u043e\u0434\u0445\u043e\u0434 \u0441 asyncio \u0442\u043e\u0436\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0442\u0443\u0442 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430. </p>"},{"location":"laba_2/page9/#no-2","title":"\u0412\u044b\u0432\u043e\u0434 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044e \u2116 2","text":"<p>\u0412 \u0446\u0435\u043b\u043e\u043c \u0432 \u043f\u043e\u0434\u0445\u043e\u0434\u0435 \u0441 threading \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0442\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430, \u0445\u043e\u0442\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f GIL \u043d\u0435 \u0442\u0430\u043a \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u044b \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0431\u0430\u0437\u0443. \u041f\u043e\u0434\u0445\u043e\u0434 \u0441 multiprocessing \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 GIL \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e asyncio \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f I/O-\u0437\u0430\u0434\u0430\u0447, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 asyncio \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e I/O \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043d\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p>"},{"location":"laba_3/main/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":""},{"location":"laba_3/main/#_2","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p>"},{"location":"laba_3/main/#_3","title":"\u0417\u0430\u0434\u0430\u0447\u0438 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<ol> <li>\u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker</li> <li>\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI</li> <li>\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c</li> </ol> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438.</p>"},{"location":"laba_3/page1/","title":"\u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 \u0432 Docker","text":"<p>\u0414\u043b\u044f FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043f\u0430\u043f\u0441\u0435\u0440\u0430 \u0431\u044b\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 Docker-\u0444\u0430\u0439\u043b\u044b.  \u0417\u0430\u0434\u0430\u043d\u044b \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432\u0445\u043e\u0434\u0430.</p>"},{"location":"laba_3/page1/#docker-fastapi","title":"Docker \u0434\u043b\u044f FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":"<pre><code>FROM python:3.11\n\nWORKDIR /app\n\nCOPY requirements.txt .\n\nRUN pip install --root-user-action=ignore -r /app/requirements.txt\n\nCOPY . .\n\nENTRYPOINT [ \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n</code></pre>"},{"location":"laba_3/page1/#docker_1","title":"Docker \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<pre><code>FROM python:3.11\n\nWORKDIR /web_parser\n\nCOPY requirements.txt .\n\nRUN pip install --root-user-action=ignore -r /web_parser/requirements.txt\n\nCOPY . .\n\nCMD [ \"uvicorn\", \"web_parser:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8081\"]\n</code></pre>"},{"location":"laba_3/page2/","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Docker Compose \u0444\u0430\u0439\u043b\u0430","text":"<p>\u0414\u0430\u043b\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d Docker Compose \u0444\u0430\u0439\u043b \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 \u0438 \u0438\u0445 \u0441\u0432\u044f\u0437\u044f\u043c\u0438. </p> <pre><code>version: '3.11'\n\nservices:\n  app:\n    build:\n      context: ./app\n      dockerfile: Dockerfile\n    env_file:\n      - app/.env\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      - postgres\n\n  web_parser:\n    build:\n      context: ./web_parser\n      dockerfile: Dockerfile\n    ports:\n      - \"8081:8081\"\n    depends_on:\n      - postgres\n      - app\n\n  postgres:\n    image: postgres\n    container_name: postgres_db\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=12345\n      - POSTGRES_DB=tasks_db\n    ports:\n      - \"5434:5432\"\n\n  redis:\n    image: redis:latest\n    container_name: redis\n    ports:\n      - \"6379:6379\"\n\n  celery_worker:\n      build: ./web_parser\n      command: celery -A web_parser.celery_app worker --loglevel=info\n      depends_on:\n        - redis\n        - app\n        - postgres\n      environment:\n        - REDIS_URL=redis://redis:6379/0\n</code></pre>"},{"location":"laba_3/page3/","title":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI","text":"<p>\u0412 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 FastAPI \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0443\u0442\u044c, \u0434\u0430\u043b\u0435\u0435 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 parse \u043e\u043d \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c. </p> <pre><code>import requests\nfrom fastapi import APIRouter\n\nparser_url = \"http://web_parser:8081/parse\"\n\nrouter = APIRouter()\n\n@router.get(\"\", response_model=dict)\ndef parse(url: str):\n    response = requests.post(parser_url, json={'url': url})\n    return response.json()\n</code></pre>"},{"location":"laba_3/page4/","title":"\u041a\u043e\u0434 \u043f\u0430\u0440\u0441\u0435\u0440\u0430","text":"<p>\u0417\u0434\u0435\u0441\u044c \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f Celery \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435. \u0422\u0430\u043a\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0441\u0430\u043c \u043a\u043e\u0434 \u043f\u0430\u0440\u0441\u0435\u0440\u0430.</p> <pre><code>from fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nimport config\nimport requests\n\nfrom connection import DataBaseConnection\nfrom bs4 import BeautifulSoup\nfrom datetime import date, timedelta\nfrom sqlalchemy.orm import sessionmaker\nfrom celery import Celery\n\ncelery_app = Celery(\n    \"web_parser\",\n    result_backend=f\"redis://redis:6379/0\",\n    broker=\"redis://redis:6379\",\n)\n\napp = FastAPI()\n\nclass ParseRequest(BaseModel):\n    url: str\n\n@app.post(\"/parse/\")\nasync def parse(request: ParseRequest):\n    try:\n        parse_and_save.delay(request.url)\n        return {\"message\": f\"Tasks were successfully saved!\"}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n\n@celery_app.task\ndef parse_and_save(url):\n    try:\n        engine = DataBaseConnection.connect_to_database()\n        session_local = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n        response = requests.get(url)\n        html = response.text\n        soup = BeautifulSoup(html, 'html.parser')\n        tasks = soup.find_all(config.HTML_TAG, class_=config.HTML_CLASS)\n        task = tasks[0].text.strip().replace('\\xa0', ' ')\n\n        with session_local() as session:\n            task_data = {\n                'title': task,\n                'description': '',\n                'deadline': str(date.today() + timedelta(7)),\n                'created_date': str(date.today()),\n                'priority': 'high',\n                'status': 'to_do',\n                'category_id': 1,\n                'user_id': 1\n            }\n            session.execute(DataBaseConnection.INSERT_SQL, task_data)\n            session.commit()\n    except Exception as e:\n        print(f\"Error in parse_and_save: {e}\")\n</code></pre>"}]}